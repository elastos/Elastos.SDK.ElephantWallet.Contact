#include "%ClassName%.proxy.h"

#include <CrossPLUtils.hpp>
#include <%ClassName%.hpp>

using crosspl::CrossPLUtils;

%PlatformFunction%

%NativeFunction%

#ifdef __ANDROID__
namespace crosspl {
namespace proxy {
int %ClassName%::RegisterNativeMethods(JNIEnv* jenv)
{
  const JNINativeMethod methodArray[] = {
%JniNativeMethods%
  };
  int methodArraySize = sizeof(methodArray)/sizeof(*methodArray);

  jclass jclazz = CrossPLUtils::FindJavaClass(jenv, "%JniJavaClass%");
  if(jclazz == nullptr) {
    return -1;
  }
  int ret = jenv->RegisterNatives(jclazz, methodArray, methodArraySize);
  if(ret < 0) {
    return ret;
  }

  const JNINativeMethod kotlinStaticMethodArray[] = {
%KotlinStaticNativeMethods%
  };
  int kotlinStaticMethodArraySize = sizeof(kotlinStaticMethodArray)/sizeof(*kotlinStaticMethodArray);

  if(kotlinStaticMethodArraySize > 0) {
    jclazz = CrossPLUtils::FindJavaClass(jenv, "%JniJavaClass%$Companion");
    if(jclazz == nullptr) {
      return -1;
    }
    ret = jenv->RegisterNatives(jclazz, kotlinStaticMethodArray, kotlinStaticMethodArraySize);
    if(ret < 0) {
      return ret;
    }
  }

  return 0;
}
} // namespace proxy
} // namespace crosspl
#endif // __ANDROID__
